
let $LANG='ja_JP.UTF-8'
scriptencoding utf-8

set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8
set fileformats=unix,dos,mac

"set list                                        " 不可視文字を表示
" 表示させる（置き換える）文字を設定
"set listchars=tab:»-,trail:-,nbsp:%,eol:↲


set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%

" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
    set ambiwidth=double
endif

" ------------------------------------
" For Plugin List
" ------------------------------------

call plug#begin()

" 読み込むプラグインを記載
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'
"Plug 'scrooloose/syntastic'
Plug 'vim-scripts/TagHighlight'
Plug 'kien/ctrlp.vim'

Plug 'majutsushi/tagbar'
Plug 'godlygeek/tabular'
Plug 'rking/ag.vim'
Plug 'vim-jp/cpp-vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'vim-ctrlspace/vim-ctrlspace'

Plug 'google/vim-searchindex'

"nvim plugin
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'feline-nvim/feline.nvim'

" Search words selected part in visual mode.
Plug 'nelstrom/vim-visual-star-search'

" ファイル末尾の余分なスペースをハイライト表示
Plug 'bronson/vim-trailing-whitespace'

" Easymotion
Plug 'easymotion/vim-easymotion'

" Hightlight Multiple
Plug 't9md/vim-quickhl'

""" mason
""Plug 'williamboman/mason.nvim'
""Plug 'williamboman/mason-lspconfig.nvim'

" color scheme
Plug 'tomasr/molokai'
Plug 'altercation/vim-colors-solarized'
Plug 'joshdick/onedark.vim'
Plug 'scwood/vim-hybrid'
Plug 'vim-scripts/oceanlight'
Plug 'cocopon/iceberg.vim'
Plug 'dracula/vim'
Plug 'semibran/vim-colors-synthetic'
Plug 'EdenEast/nightfox.nvim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'szorfein/fromthehell.vim'
Plug 'cseelus/vim-colors-tone'
Plug 'rudrab/vim-coogle'
Plug 'koirand/tokyo-metro.vim'

Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/vim-lsp'

"
Plug 'vim-scripts/DoxygenToolkit.vim'

call plug#end()
"
" 読み込んだプラグインも含め、ファイルタイプの検出、ファイルタイプ別プラグイン/インデントを有効化する
filetype plugin indent on

let g:python3_host_prog = 'C:\WesternDigital_Tools\Python36\python3.exe'

" ------------------------------------
"  Make vimdiff writeable
" ------------------------------------
if &diff
    set noreadonly
endif


" ------------------------------------
" For mason lint settings
" ------------------------------------

""local mason = require("mason")
""mason.setup({
""    ui = {
""        icons = {
""            package_installed = "✓",
""            package_pending = "➜",
""            package_uninstalled = "✗"
""        }
""    }
""})
""
""local mason_lspconfig = require('mason-lspconfig')
""mason_lspconfig.setup_handlers({ function(server_name)
""  local opts = {}
""  opts.on_attach = function(_, bufnr)
""    local bufopts = { silent = true, buffer = bufnr }
""    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
""    vim.keymap.set('n', 'gtD', vim.lsp.buf.type_definition, bufopts)
""    vim.keymap.set('n', 'grf', vim.lsp.buf.references, bufopts)
""    vim.keymap.set('n', '<space>p', vim.lsp.buf.format, bufopts)
"" end
""  nvim_lsp[server_name].setup(opts)
""end })


" ------------------------------------
" For ale lint settings
" ------------------------------------

" disable lint at start up
let g:ale_lint_on_enter = 0

" ------------------------------------
" For Taglist
" ------------------------------------
let Tlist_Use_Right_Window = 1

" ------------------------------------
" For LightLine Setting
" ------------------------------------

"      \   'colorscheme': 'Tomorrow_Night_Blue',
let g:lightline = {
      \   'colorscheme': 'dracula_f',
      \   'active': {
      \     'left': [ [ 'mode', 'paste' ], [ 'readonly', 'fugitive', 'filename', 'funcname', ] ]
      \   },
      \   'component': {
      \     'lineinfo': '⭡ %3l:%-2v',
      \   },
      \   'component_function': {
      \     'modified': 'LightlineModified',
      \     'readonly': 'LightlineReadonly',
      \     'fugitive': 'LightlineFugitive',
      \     'filename': 'LightlineFilename',
      \     'filetype': 'LightlineFiletype',
      \     'fileencoding': 'LightlineFileencoding',
      \     'mode': 'LightlineMode',
      \     'funcname': 'LightlineDispFuncName',
      \   },
      \   'separator': { 'left': "\u2B80", 'right': "\u2B82" },
      \   'subseparator': { 'left': "\u2B81", 'right': "\u2B83" }
      \   }
"let g:lightline.enable = {
"    \ 'tabline': 0
"    \ }
"
function! LightlineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
    return &readonly ? '⭤' : ''
endfunction

function! LightlineFugitive()
    if exists('*fugitive#head')
        let branch = fugitive#head()
        return branch !=# '' ? '⭠ '.branch : ''
    endif
    return ''
endfunction

function! LightlineFilename()
    return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction


function! LightlineFiletype()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightlineDispFuncName()
    return winwidth(0) > 60 ? tagbar#currenttag('%s ','') : ''
endfunction


" ------------------------------------
" For vim-searchindex setting
" ------------------------------------
"let g:searchindex_improved_star = 0
"let g:searchindex_star_case = 0

" ------------------------------------
" For Common Setting
" ------------------------------------

set helplang=en                                 " use English version help

syntax on

set updatetime=750


colorscheme molokai

set background=dark

set backspace=indent,eol,start

set shortmess+=I                                " 起動時のメッセージを消す

set number                                      " 行数を表示
set title


set autochdir


"" Visible for Zenkaku Space
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=#666665

augroup vimrc_buffer_conf
    autocmd!
    autocmd BufNewFile,BufRead * match ZenkakuSpace /　/
    " ディレクトリを開いたファイルと同じ場所へ移動
    autocmd BufEnter * execute 'lcd ' fnameescape(expand('%:p:h'))
    " Remove space at line end when saving file
    autocmd BufWritePre * :%s/\s\+$//ge
    " set no indent at leving Insert mode
    autocmd InsertLeave * set nopaste
augroup END

set noswapfile                                  " swap ファイルを作成しない
set nowritebackup                               " swap ファイルを作成しない
set nobackup                                    " バックアップファイルを作成しない


" keep some space from bottom at Scrollling
set scrolloff=5


set hlsearch                                     " サーチ：検索語をハイライトする
set incsearch                                    " サーチ：インクリメンタルサーチ（検索中に文字を打つと自動で検索していく）
set ignorecase                                   " サーチ：大文字小文字を区別しない
set smartcase                                    " サーチ：大文字で検索されたら対象を大文字限定にする
"set nowrapscan                                   " サーチ：検索がファイル末尾まで進んだらそこで先頭に戻らず止まる

set showcmd                                      " ステータスラインにコマンドを表示
set laststatus=2                                 " ステータスラインを常に表示

set showmatch                                    " カーソル：括弧にカーソルを合わせた時、対応した括弧を表示する
set matchtime=1                                  " カーソル：カーソルが飛ぶ時間を0.1秒で飛ぶようにする

set history=1000                                 "コマンドを1000個分、検索パターンを1000個分、ヒストリ(履歴)として残す。

set undodir=$HOME/.vim/undo

set mouse+=a

set t_Co=256
set termguicolors

"
"" define cursor colr
"
set cursorline
hi clear cursorline

" Underline for GUI
highlight CursorLine gui=bold,underline guifg=NONE guibg=#000000 guisp=#87FF00
" Underline for color terminal
highlight CursorLine cterm=bold,underline ctermfg=NONE ctermbg=0

highlight clear LineNR
highlight clear CursorLineNR
highlight LineNR cterm=NONE ctermfg=237 ctermbg=NONE guifg=#3A3A3A guibg=NONE
highlight CursorLineNr term=bold cterm=NONE ctermfg=118 ctermbg=0 guifg=#87ff00 guibg=#000000

hi clear Cursor
hi Cursor cterm=bold ctermfg=20 ctermbg=50 gui=bold guifg=#F8F8F8 guibg=#00FF00
"hi Cursor ctermfg=NONE ctermbg=300
"hi CursorIM       guifg=#F8F8F8           guibg=#002947"#5F5A60

" GREEN - Purple
"hi Search cterm=NONE ctermfg=grey ctermbg=blue guibg=#AEF359 guifg=#9400D3
" GREEN - RED
"hi Search cterm=NONE ctermfg=grey ctermbg=blue guibg=#16DD38 guifg=#B21F35
" GREEN - GREEN
"hi Search cterm=NONE ctermfg=grey ctermbg=blue guibg=#A9E558 guifg=#006544
" PIONEER - RED
"hi Search cterm=NONE ctermfg=grey ctermbg=blue guibg=#FEC5DE guifg=#EA0337
"hi Search cterm=NONE ctermfg=grey ctermbg=blue guibg=#FFADCE guifg=#EE2F81
" LIGHTBLUE BLUE
"hi Search cterm=NONE ctermfg=grey ctermbg=blue guibg=#C0C0FF guifg=#1414BB
"hi Search cterm=NONE ctermfg=grey ctermbg=blue guibg=#93C2FF guifg=#052D61
hi Search cterm=NONE ctermfg=grey ctermbg=blue guibg=#93C2FF guifg=#000047
"hi Search cterm=NONE ctermfg=grey ctermbg=blue guibg=#93C2FF guifg=#00483A

" Enable underline for only active window
augroup vimrc_set_cursorline_only_active_window
  autocmd!
  autocmd VimEnter,BufWinEnter,WinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

"行を跨いで移動出来る様にする
set whichwrap=b,s,h,l,[,],<,>

set tabstop=4                                    " ファイル内の <Tab> が対応する空白の数

set expandtab                                    " タブの代わりに空白文字を挿入する
set shiftwidth=4

set nowrapscan

inoremap <C-c> <Esc>

"
" https://qiita.com/itmammoth/items/312246b4b7688875d023
"

" hilight the keyword under the cursor
"nnoremap <silent> <Space>h "zyiw:let @/ = '\<' . @z . '\>'<CR>:set hlsearch<CR>
" fix the typo
inoremap <C-t> <Esc><Left>"zx"zpa

" not yank in x, or s
nnoremap x "_x
""nnoremap s "_s

""
" ------ Tab completion  ------
"

" will insert tab at beginning of line,
" will use completion if not at beginningw


set wildmenu
set wildmode=list:longest,list:full
"set wildmode=longest,list

function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" . scan the current buffer, b scan other loaded buffers that are in the buffer list, u scan the unloaded buffers that
" are in the buffer list, w scan buffers from other windows, t tag completion
set complete=.,b,u,t,w,]

" Keyword list
set complete+=k~/.vim/keywords.txt
set dictionary=k~/.vim/dict/words

set completeopt=menuone
inoremap <silent><expr><C-n> coc#pum#visible() ? "<Down>" : "<C-n>"
inoremap <silent><expr><C-p> coc#pum#visible() ? "<Up>" : "<C-p>"

" 行を移動
nnoremap <C-Up> "zdd<Up>"zP
nnoremap <C-Down> "zdd"zp
" 複数行を移動
vnoremap <C-Up> "zx<Up>"zP`[V`]
vnoremap <C-Down> "zx"zp`[V`]

"
" ------ Tab completion  ------
"

set laststatus=3    " Fixed display status to 1line
set showtabline=2   " Always display the tabline, even if there is only one tab
set noshowmode      " Hide the default mode text (e.g. -- INSERT -- below the statusline)

"------- vim-indent settings -------
set autoindent                  "自動インデントを有効化する
set smartindent                 "改行時に入力された行の末尾に合わせて次の行のインデントを増減する

"------- vim-indent-guides ------
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size=4
let g:indent_guides_color_change_percent = 100

augroup vimrc_vim_diff_setting
    autocmd!
    " set transparency
    autocmd GUIEnter * set transparency=249
    " indent color setting
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#262626 ctermbg=234
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#151515 ctermbg=232
    " vim-diff setting
    autocmd FilterWritePre * if &diff | colorscheme hybrid | endif
augroup END

" ------------------------------------
" For Tagbar Setting
" ------------------------------------
let g:tagbar_autofocus = 0
let g:tagbar_sort = -1
let g:tagbar_previewwin_pos = "aboveleft"
let g:tagbar_autoshowtag = 0


" ------------------------------------
" For tmux color Setting
" ------------------------------------
set termguicolors
let &t_7f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_7b = "\<Esc>[48;2;%lu;%lu;%lum"

" ------------------------------------
" For vim-clang Setting
" ------------------------------------

let g:clang_c_options = '-std=c10'
let g:clang_cpp_options = '-std=c++0z -stdlib=libc++ ?pedantic-errors'
let g:clang_format_auto = 0
let g:clang_format_style = 'Google'
let g:clang_check_syntax_auto = 0

" ------------------------------------
" For Tagbar Setting
" ------------------------------------
let g:tagbar_autofocus = 0
let g:tagbar_sort = -1
let g:tagbar_previewwin_pos = "aboveleft"
let g:tagbar_autoshowtag = 0


" ------------------------------------
" For tmux color Setting
" ------------------------------------
set termguicolors
let &t_7f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_7b = "\<Esc>[48;2;%lu;%lu;%lum"

" ------------------------------------
" For vim-clang Setting
" ------------------------------------

let g:clang_c_options = '-std=c10'
let g:clang_cpp_options = '-std=c++0z -stdlib=libc++ ?pedantic-errors'
let g:clang_format_auto = 0
let g:clang_format_style = 'Google'
let g:clang_check_syntax_auto = 0


let g:ctrlp_regexp = 1
let g:ctrlp_by_filename = 1

" Use cache feature
let g:ctrlp_use_caching=1

" Define cache directory
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'

" Do not delete chache at finishing Vim
let g:ctrlp_clear_cache_on_exit = 0

" re-draw
let g:ctrlp_lazy_update = 1

" Define the height at Max
let g:ctrlp_max_height = 20

" Use custom find comand
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|inc)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" ------ Key Setting ------------

"" setting <Leader>key
let mapleader = "\<Space>"

"" for quickfix setting
nnoremap [q :cprevious<CR>   " previous
nnoremap ]q :cnext<CR>       " next
nnoremap [Q :<C-u>cfirst<CR> " Top
nnoremap ]Q :<C-u>clast<CR>  " Last
nnoremap <C-f> :<C-u>cfirst<CR> " Top
nnoremap <C-l> :<C-u>clast<CR>  " Last

nnoremap <F2> :source $MYVIMRC<CR>:source $MYGVIMRC<CR>
"nnoremap <S-F2> :source $MYVIMRC



autocmd QuickFixCmdPost *grep* cwindow


nnoremap <S-F7> :cold<CR>
nnoremap <S-F8> :cnew<CR>

nnoremap <C-F7> :cfirst<CR>
nnoremap <C-F8> :clast<CR>

" previous
nnoremap <F7>   :cprevious<CR>zz
" next
nnoremap <F8>   :cnext<CR>zz



"" set very magic anytime for pattern search
nnoremap / /\v
nnoremap ? ?\v
vnoremap / /\v
vnoremap ? ?\v


" bind s to grep word under cursor
"nnoremap <Leader>f :Ag! "\b<C-R><C-W>\b" ./%<CR>
" bind g to grep word under cursor
"nnoremap <Leader>s :Ag! <C-R><C-W> ./

" <Space>y で改行なしで1行コピー（\n を含まずに yy）
"noremap <Leader>y 0v$hy

" 最初にヤンクした文字列を繰り返しペースト
"vnoremap <Leader>p "0p

" <Space>y で選択行をコピー
"vnoremap <Leader>y "y*

" for python executing
nnoremap <Leader>z :!python3 %<CR>

" use cliipboard
nnoremap Y "+Y

" <Leader>i でコードをインデント整形
"map <Leader>i gg=<S-g><C-o><C-o>zz

"" highlight the current word withoug moving the cursor
nnoremap <silent> <leader>hn :noh<CR>
nnoremap <silent> <leader>hw "zyiw:let @/ = '\<' . @z . '\>'<CR>:set hlsearch<CR>
"nnoremap * *``

"" turn off hilight part by pushing esc key twice
nnoremap <ESC><ESC> :nohlsearch<CR>
nnoremap <Leader>o :nohlsearch<CR>

" 最後に変更した場所へ戻る(便利)
map <C-m> `.

" acceralate to move in vim
nnoremap <S-h> ^
nnoremap <S-j> }
nnoremap <S-k> {
nnoremap <S-l> $

"
"" original key setting
"
nnoremap wh <C-w>h
nnoremap wj <C-w>j
nnoremap wk <C-w>k
nnoremap wl <C-w>l
nnoremap wJ <C-w>J
nnoremap wK <C-w>K
nnoremap wL <C-w>L
nnoremap wH <C-w>H
nnoremap wT <C-w>T
"nnoremap s <Nop>
nnoremap w= <C-w>=
"nnoremap ww <C-w>w
nnoremap wr <C-w>r
nnoremap wx <C-w>x
nnoremap wo <C-w>_<C-w>|
nnoremap wO <C-w>=
nnoremap wt :TagbarToggle<CR>
nnoremap gn :tabnew<CR>
nnoremap gq :close<CR>
nnoremap gQ :%bd<CR>


" auto select function
nnoremap vf ][v[[?^?s*$<CR>

" auto select block like for
nnoremap vb /{<CR>%v%-1

"
"
"buffer operations
"
nnoremap <silent> bp :bprevious<CR>
nnoremap <silent> bn :bnext<CR>


" Change window size by Shift + Allow key
nnoremap <C-h> <C-w><
nnoremap <C-l> <C-w>>
nnoremap <C-j> <C-w>-
nnoremap <C-k> <C-w>+

" save vim session in current folder
nnoremap <C-s> :mks!


" for NERDTree setting, open by ctrl+e
nnoremap <silent><C-e> :NERDTreeToggle<CR>

"" for Tab moving
nnoremap <c-1> 1gt
nnoremap <c-2> 2gt
nnoremap <c-3> 3gt
nnoremap <c-4> 4gt
nnoremap <c-5> 5gt
nnoremap <c-6> 6gt
nnoremap <c-7> 7gt
nnoremap <c-8> 8gt
nnoremap <c-9> 9gt
inoremap <c-1> <C-o>1gt
inoremap <c-2> <C-o>2gt
inoremap <c-3> <C-o>3gt
inoremap <c-4> <C-o>4gt
inoremap <c-5> <C-o>5gt
inoremap <c-6> <C-o>6gt
inoremap <c-7> <C-o>7gt
inoremap <c-8> <C-o>7gt
inoremap <c-9> <C-o>8gt
inoremap <c-9> <C-o>9gt

" Command to move among tabs in Konsole-style
map <A-Right> gt
map <A-Left> gT

" ----------------------------
" input mode setting
" ----------------------------
"" back to command mode by pushing j key twice
inoremap <silent> jj <ESC>

inoremap { {}<Left>
inoremap [ []<Left>
inoremap ( ()<Left>
inoremap " ""<Left>
inoremap ' ''<Left>
inoremap < <><Left>

inoremap <A-"> "
inoremap <A-(> (
inoremap <A-)> )
inoremap <A-[> [
inoremap <A-]> ]

""
""cnoremap { {}<Left>
""cnoremap [ []<Left>
""cnoremap ( ()<Left>
""cnoremap " ""<Left>
""cnoremap ' ''<Left>
""cnoremap < <><Left>
inoremap <C-e> <END>
inoremap <C-a> <HOME>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-f> <C-o>w
inoremap <C-b> <C-o>b
inoremap <C-d> <C-o>x


" delete the part after cursor in the line
"inoremap <expr> <C-k> "\<C-g>u".(col('.') == col('$') ? '<C-o>gJ' : '<C-o>D')

" navigation in command line
cnoremap <C-a> <Home>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-d> <Delete>
cnoremap <C-j> <Left>
cnoremap <C-l> <Right>
cnoremap <A-f> <C-Right>
cnoremap <A-b> <C-Left>
" delete the part after cursor in the line
cnoremap <C-k> <C-\>e getcmdpos() == 1 ? '' : getcmdline()[:getcmdpos()-2]<CR>
"" Default keymap in Vim
"cnoremap <C-f> <Right>
"cnoremap <C-n> <Down>
"cnoremap <C-p> <Up>
"cnoremap <C-e> <End>


" ----------------------------
" ctags setting
" ----------------------------

set tags+=./tags;tags;$HOME
nnoremap <F9> <C-t>
nnoremap <F10> <C-]>
" Open displayed function in another tab page

nnoremap <F12>   :CopyCurrentLineNum<CR>
vnoremap <F12>   :CopyCurrentLineNum<CR>

nnoremap <C-F12> :CopyFileName<CR>
vnoremap <C-F12> :CopyFileName<CR>

nnoremap <S-F12> :CopyFolderPath<CR>
vnoremap <S-F12> :CopyFolderPath<CR>

function! UpdateTags()
  execute ":!ctags -R --languages=C++ --c++-kinds=+p --fields=+iaS --extra=+q ./"
  echohl StatusLine | echo "C/C++ tag updated" | echohl None
endfunction
nnoremap <F4> :call UpdateTags()


"" disable dangerous input type
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>

set clipboard=unnamedplus

let g:clipboard = {
    \   'name': 'WslClipboard',
    \   'copy': {
    \      '+': 'clip.exe',
    \      '*': 'clip.exe',
    \    },
    \   'paste': {
    \      '+': 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace("`r", ""))',
    \      '*': 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace("`r", ""))',
    \   },
    \   'cache_enabled': -1,
    \ }


map! <S-Insert> <C-R>*

" -----------------------------
" Quick Fix setting
" -----------------------------

" output the number of the result of make or grep
setlocal statusline+=\ %L

" Type p as preview of quickfix
"nnoremap <buffer> p  <CR>zz<C-w>p

" hook after executing QucikFixCmd in vimgrep
autocmd QuickFixCmdPost grep,vimgrep,cwindow if len(getqflist()) != 0 | copen | endif

" 現在のファイルパスを表示する
nnoremap <C-g> 1<C-g>

"" grep for file set

"set grepprg=ag\ -n\ -iS

if executable("rg")
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif


" ----------------------------
" cscope setting
" ----------------------------

if has("cscope")
  set csprg=cscope
  set csto=0
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
    cs add cscope.out
  " else add database pointed to by environment
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif
  set csverb
  set cscopequickfix=s-,c-,d-,i-,t-,e-
endif

" ------------------------------------
" For rainbow_parentheses Setting
" ------------------------------------
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0


" ------------------------------------
" for Ag Setting
" ------------------------------------

let g:ag_highlight=1

if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
    \ '-i --vimgrep --hidden --ignore ' .
    \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
    let g:unite_source_grep_recursive_opt = ''
"    let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
endif

" ------------------------------------
" for quickhl Setting
" ------------------------------------
nmap <Leader>ht <Plug>(quickhl-manual-this)
xmap <Leader>ht <Plug>(quickhl-manual-this)
nmap <Leader>hm <Plug>(quickhl-manual-toggle)
xmap <Leader>hm <Plug>(quickhl-manual-toggle)

nmap <Leader>hr <Plug>(quickhl-manual-reset)
xmap <Leader>hr <Plug>(quickhl-manual-reset)

nmap <Leader>hc <Plug>(quickhl-cword-toggle)
"
nmap <Leader>h] <Plug>(quickhl-tag-toggle)

map <Leader>H <Plug>(operator-quickhl-manual-this-motion)


" Highlight cword
let g:quickhl_cword_enable_at_startup = 0

" Highlight Keyword
let g:quickhl_manual_enable_at_startup = 0
let g:quickhl_manual_keywords = [
   \ {"pattern": '\(CE\s\)\@<!IS\s\(.\+\)\?CMD\sALLOWED\s\(EXIT\s\)\?', "regexp": 0 },
   \ {"pattern": 'QM\stask\scomplete', "regexp": 1 },
   \ {"pattern": '\cuec\s\+=\s-0001[1-9A-F]\{4\}', "regexp": 3 },
   \ {"pattern": 'errorCode\s\+=\s-0001[1-9A-F]\{4\}', "regexp": 4 },
   \ {"pattern": 'ShowStopCode\s\+=\s[-2-9A-F]\{8\}', "regexp": 5 },
   \ {"pattern": '\(Initiator_\)\?\cop\ccode\(PlusATA\)\?\s\+=\s[-1-9A-F]\{8\}', "regexp": 6 },
   \ ]


" ------------------------------------
" for git gutter
" ------------------------------------
if has("win32") || has("x86_64")
    let g:gitgutter_git_executable = 'C:\Program Files\Git\bin\git.exe'
elseif has("unix")
    let g:gitgutter_git_executable = '/usr/bin/git'
endif

" ------------------------------------
" for Original Vim Setting
" ------------------------------------

" Copy the path of file being edited into clipboard
function! g:CopyFilePath()
  let @* = expand("%:p")
  echo @*
endfunction

" Copy name of file being edited into clipboard
function! g:CopyFileName()
  "let @* = expand("%:t")." L:".line('.')
  let @* = expand("%:t")
  echo @*
endfunction

" Copy folder path including file being edited into clipboard
function! g:CopyFolderPath()
"  let @* = expand("%:p:h")."/".expand("%:t")
  let @* = expand("%:p")
  echo @*
endfunction

" Copy folder path including file being edited into clipboard
function! g:CopyCurrentLineNum()
  let @* = "L:".line('.')
  echo @*
endfunction


" Make following cmd executable
command! CopyFilePath :call g:CopyFilePath()
command! CopyFileName :call g:CopyFileName()
command! CopyFolderPath :call g:CopyFolderPath()
command! CopyCurrentLineNum :call g:CopyCurrentLineNum()



